
HOWTO.txt
2008-05-20
Aaron Binns

Table of Contents
 o Prerequisites
   - Nutch(WAX) installation
   - ARC/WARC files
 o Configuration & Patching
 o Create a manifest
 o Import, Invert and Index
 o Search
 o Web deployment
   - Don't forget to config & patch again

======================================================================
Prerequisites
======================================================================

In order to use Nutch(WAX) you need the following prerequisites:

 1. NutchWAX installed.

    See INSTALL.txt for instruction on building and installing
    NutchWAX.

    This HOWTO assumes it is installed in

      /opt/nutch-1.0-dev

 2. ARC/WARC files.

    The whole purpose of NutchWAX is to index ARC/WARC files.  These
    files are not produced by Nutch nor NutchWAX, they are produced by
    other tools, such as Heritrix.

    If you don't have any ARC/WARC files, you have no need for
    NutchWAX.


======================================================================
Patching
======================================================================

The vanilla NutchWAX as built according to the INSTALL.txt guide is
not quite ready to be used out-of-the-box.

Before you can use NutchWAX, you must first patch a bug that exists in
the current Nutch SVN head.

The file

  /opt/nutch-1.0-dev/conf/tika-mimetypes.xml

contains two errors: one where a mimetype is referenced before it is
defined; and a second where a definition has an illegal character.

These errors cause Nutch to not recognize certain mimetypes and
therefore will ignore documents matching those mimetypes.

There are two fixes:

 1. Move

	<mime-type type="application/xml">
		<alias type="text/xml" />
		<glob pattern="*.xml" />
	</mime-type>

    definition higher up in the file, before the reference to it.

 2. Remove

	<mime-type type="application/x-ms-dos-executable">
		<alias type="application/x-dosexec;exe" />
	</mime-type>

    as the ';' character is illegal according to the comments in the
    Nutch code.

You can either apply these patches yourself, or copy an already-patched
copy from:

  /opt/nutch-1.0-dev/contrib/archive/conf/tika-mimetypes.xml

to 

  /opt/nutch-1.0-dev/conf/tika-mimetypes.xml


======================================================================
Configuring
======================================================================

Since we assume that you are already familiar with Nutch, then you
should already be familiar with configuring it.  The configuration
is mainly defined in

  /opt/nutch-1.0-dev/conf/nutch-default.xml

NutchWAX requires the modification of two existing properties and the
addition of two new ones.

All of the modifications described below can be found in:

  /opt/nutch-1.0-dev/contrib/archive/conf/nutch-site.xml

You can either apply the configuration changes yourself, or copy that
file to

  /opt/nutch-1.0-dev/conf/nutch-site.xml

--------------------------------------------------
plugin.includes
--------------------------------------------------
Change the list of plugins from:

  protocol-http|urlfilter-regex|parse-(text|html|js)|index-(basic|anchor)|query-(basic|site|url)|summary-basic|scoring-opic|urlnormalizer-(pass|regex|basic)

to

  protocol-http|parse-(text|html|js|pdf)|index-(basic|anchor|nutchwax)|query-(basic|site|url|nutchwax)|summary-basic|scoring-opic

In short, we add:

  index-nutchwax
  query-nutchwax
  parse-pdf

and remove:

  urlfilter-regex
  urlnormalizer-(pass|regex|basic)

The only *required* changes are the additions of the NutchWAX index
and query plugins.  The rest are optional, but recommended.

The addition of the "parse-pdf" plugin is simply because we have lots
of PDFs in our archives and we want to index them.  We sometimes
remove the "parse-js" plugin if we don't care to index JavaScript
files.

We also remove the URL filtering and normalizing plugins because we do
not need the URLs normalized nor filtered.  We trust that the tool
that produced the ARC/WARC file will have normalized the URLs
contained therein according to its own rules so there's no need to
normalize here.  Also, we don't filter by URL since we want to index
as much of the ARC/WARC file as we have parsers for.

--------------------------------------------------
mime.type.magic
--------------------------------------------------
We disable mimetype detection in Nutch for two reasons:

1. The ARC/WARC file specifies the Content-Type of the document.  We
   trust that the tool that created the ARC/WARC file got it right.

2. The implementation in Nutch can use a lot of memory as the *entire*
   document is read into memory as a byte[], then converted to a
   String, then checked against the MIME database.  This can lead to
   out of memory errors for large files, such as music and video.

To disable, simply set the property value to false.

  <property>
    <name>mime.type.magic</name>
    <value>false</value>
  </property>

--------------------------------------------------
nutchwax.filter.index
--------------------------------------------------
Configure the 'index-nutchwax' plugin.  Specify how the metadata
fields added by the ArcsToSegment are mapped to the Lucene documents
during indexing.

The specifications here are of the form:

  src-key:lowercase:store:tokenize:dest-key

where the only required part is the "src-key", the rest will assume
the following defaults:

  lowercase = true
  store     = true
  tokenize  = false
  dest-key  = src-key

We recommend:

<property>
  <name>nutchwax.filter.index</name>
  <value>
    arcname:false
    collection
    date
    type
  </value>
</property>

--------------------------------------------------
nutchwax.filter.query
--------------------------------------------------
Configure the 'query-nutchwax' plugin.  Specify which fields to make
searchable via "[field]:[term|phrase]" query syntax, and whether they
are "raw" fields or not.

The specification format is 

  raw:name:lowercase:boost 
or
  field:name:boost

Default values are

  lowercase = true
  boost     = 1.0f

There is no "lowercase" property for "field" specification because the
Nutch FieldQueryFilter doesn't expose the option, unlike the
RawFieldQueryFilter.

NTOE: We do *not* use this filter for handling "date" queries, there is a
specific filter for that: DateQueryFilter

We recommend:

<property>
  <name>nutchwax.filter.query</name>
  <value>
    raw:arcname:false
    raw:collection
    raw:type
    field:anchor
    field:content
    field:host
    field:title
  </value>
</property>


======================================================================
Create a manifest
======================================================================

The input to NutchWAX's import tool is a manifest file.  This is a
simple text file where each line contains a URL to an ARC/WARC file
and an optional collection name.

For example:

 $ cat > manifest
 http://someserver/somepath/somearchive.arc.gz mycollection
 ^D

Creates a simple manifest file with one ARC file and a collection
name of "mycollection".

You don't have to use collections at all.  If you don't know how you
would use it, then simply leave it out here.


======================================================================
Import, Invert and Index
======================================================================

The steps to import the files, invert the link and index the documents
are rather simple:

  $ mkdir crawl
  $ cd crawl
  $ /opt/nutch-1.0-dev/bin/nutchwax import ../manifest
  $ /opt/nutch-1.0-dev/bin/nutch updatedb crawldb -dir segments
  $ /opt/nutch-1.0-dev/bin/nutch invertlinks linkdb  -dir segments
  $ /opt/nutch-1.0-dev/bin/nutch index indexes crawldb linkdb segments/*
  $ ls -F1
  crawldb/
  indexes/
  linkdb/
  segments/

To those already familiar with Nutch, these steps should be quite
familiar.

The first step, we call NutchWAX's "import" command which creates the
Nutch segment containing the documents in the ARC/WARC files listed in
the manifest.  The rest is the same as regular Nutch.


======================================================================
Search
======================================================================
The resulting indexes can be searched in exactly the same manner as in
regular Nutch.  For example, assuming you just completed the steps
above, now:

  $ cd ../
  $ ls -F1
  crawl/
  $ /opt/nutch-1.0-dev/bin/nutch org.apache.nutch.searcher.NutchBean computer

This calls the NutchBean to execute a simple keyword search for
"computer".  Use whatever query term you think appears in the
documents you imported.


======================================================================
Web Deployment
======================================================================

As users of Nutch are aware, the web application (nutch-1.0-dev.war)
bundled with Nutch contains duplicate copies of the configuration
files.

So, all patches and configuration changes that we made to the
files in

  /opt/nutch-1.0-dev/conf

will have to be duplicated in the Nutch webapp when it is deployed.

This is not due to NutchWAX, this is a "feature" of regular Nutch.  I
just thought it would be good to remind everyone since we did make
configuration changes for NutchWAX.
