<?xml version="1.0"?>

<project name="nutchwax" default="war">
  <property name="name" value="${ant.project.name}"/>
  <property name="root" value="${basedir}"/>

  <!--'nutch.root' is pointer at core nutch. Expect to find it in
  'basedir' named 'nutch'.
  -->
  <property name="nutch.root" location="${root}/nutch"/>

  <property file="${user.home}/.$(name}.build.properties" />

  <property name="src.dir" location="${root}/src/java"/>
  <property name="src.test" location="${root}/src/test"/>

  <available file="${src.test}" type="dir" property="test.available"/>

  <property name="conf.dir" location="${root}/conf"/>

  <property name="build.dir" location="${root}/build"/>
  <property name="build.classes" location="${build.dir}/classes"/>
  <property name="build.test" location="${build.dir}/test"/>

  <property name="build.plugins" location="${nutch.root}/build/plugins"/>
  <property name="deploy.dir" location="${build.plugins}/${name}"/>

  <property name="this.web" location="${root}/src/web"/>
  <property name="nutch.web" location="${nutch.root}/src/web"/>

  <property name="javac.deprecation" value="off"/>
  <property name="javac.debug" value="on"/>

  <property name="javadoc.link"
    value="http://java.sun.com/j2se/1.5/docs/api/"/>

  <property name="build.encoding" value="ISO-8859-1"/>

  <fileset id="lib.jars" dir="${root}" includes="lib/*.jar"/>

  <!-- the normal classpath -->
  <path id="classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${nutch.root}/build/classes"/>
    <fileset refid="lib.jars"/>
    <fileset dir="${nutch.root}/lib">
      <include name="*.jar" />
    </fileset>
  </path>

  <!-- the unit test classpath -->
  <path id="test.classpath">
    <pathelement location="${build.test}" />
    <pathelement location="${conf.dir}"/>
    <pathelement location="${nutch.root}/conf"/>
    <pathelement location="${nutch.root}/build"/>
    <path refid="classpath"/>
  </path>

  <!-- ====================================================== -->
  <!-- Stuff needed by all targets                            -->
  <!-- ====================================================== -->
  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.test}"/>
  </target>

  <!-- ====================================================== -->
  <!-- Compile the Java files                                 -->
  <!-- ====================================================== -->
  <target name="compile" depends="init"
        description="Compile nutchwax classes">
    <javac 
     encoding="${build.encoding}" 
     srcdir="${src.dir}"
     includes="**/*.java"
     destdir="${build.classes}"
     debug="${javac.debug}"
     target="1.5"
     source="1.5"
     deprecation="${javac.deprecation}">
      <classpath refid="classpath"/>
    </javac>    
  </target>

  <!-- ====================================================== -->
  <!-- Compile plugins                                        -->
  <!-- ====================================================== -->
  <target name="compile-plugins"
        description="Compile all nutchwax plugins">
    <ant dir="src/plugin" target="deploy" inheritAll="false"/>
  </target>

  <!-- ================================================================== -->
  <!-- Make job jar                                                       -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="jar" depends="compile, compile-plugins"
        description="Builds nutchwax jobs jar of all tasks to do import, etc." >
    <zip destfile="${build.dir}/${name}.jar">
      <zipfileset prefix="META-INF" file="${conf.dir}/MANIFEST.MF"/>
      <zipfileset file="${conf.dir}/log4j.properties"/>
      <zipfileset file="${conf.dir}/wax-parse-plugins.xml"/>
      <zipfileset file="${conf.dir}/wax-default.xml"/>
      <zipfileset file="${conf.dir}/regex-normalize.xml"/>
      <zipfileset file="${conf.dir}/regex-urlfilter.txt"/>
      <zipfileset file="${nutch.root}/conf/mime-types.xml"/>
      <zipfileset file="${nutch.root}/conf/nutch-default.xml"/>
      <zipfileset file="${nutch.root}/conf/common-terms.utf8"/>
      <zipfileset prefix="bin" file="${basedir}/src/plugin/parse-waxext/bin/parse-pdf.sh" filemode="555"/>
      <zipfileset refid="lib.jars"/>
      <!--Include all class files both nutch and nutchwax at top level
      so all needed to launch a job using the 'hadoop jar nutchwax.jobs'
      is on the classpath (Only classes that are at top-level in a jar can
      be found on CLASSPATH. Jars inside jars or classes under 'classes'
      directory cannot be found or added to CLASSPATH, not without custom
      classloader: See 
      http://java.sun.com/docs/books/tutorial/deployment/jar/downman.html).
      -->
      <zipfileset dir="${build.dir}/classes" />
      <zipfileset dir="${nutch.root}/build/classes" />
      <!-- Be selective about which plugins to copy over. Otherwise
        the jar gets massive (16Megs with all plugins.  10Megs not
        including plugins used at other than indexing time).

        Include query-time filters for case where we're running in
        distributed mode.

        Note, we EXCLUDE parse-js.  Otherwise, its run as part of
        html parse.  We don't want this because the parse-js currently
        adds base url as anchor text polluting the linkdb and its kinda
        messy regards URLs it finds in javascript.  It needs some work.
        Meantime, we'll do w/o the URLs it finds in linkdb.  See
        NUTCH-425 and 
        http://sourceforge.net/tracker/index.php?func=detail&aid=1591709&group_id=118427&atid=681137
      -->
      <zipfileset prefix="plugins" dir="${nutch.root}/build/plugins">
        <!-- See above why we exclude parse-js-->
        <exclude name="parse-js/**" /> 
        <include name="analysis-*/**" />
        <include name="index-*/**" />
        <include name="language-*/**" />
        <include name="lib-*/**" />
        <include name="nutch-*/**" />
        <include name="scoring-*/**" />
        <include name="query-*/**" />
        <include name="summary-*/**" />
        <include name="urlfilter-*/**" />
        <include name="urlnormalizer-*/**" />
        <include name="parse-*/**" />
      </zipfileset>
      <!--Add wax plugins-->
      <zipfileset prefix="wax-plugins" dir="${build.dir}/wax-plugins">
        <include name="*/**" />
      </zipfileset>
      <!--Include nutch dependencies in job jar. -->
      <zipfileset prefix="lib" file="${nutch.root}/lib/commons-lang*jar"/>
      <zipfileset prefix="lib" file="${nutch.root}/lib/lucene*jar"/>
      <zipfileset prefix="lib" file="${nutch.root}/lib/jakarta-oro*jar"/>
      <zipfileset prefix="lib" file="${nutch.root}/lib/xerces*jar"/>
      <zipfileset prefix="lib" file="${nutch.root}/lib//concurrent-1.3.4.jar"/>
      <!--Finally, include the README.txt file so can tell what
      hadoop and nutch this was built against-->
      <zipfileset file="${root}/README.txt"/>
    </zip>
  </target>


  <!-- ================================================================== -->
  <!-- Compile test code                                                  --> 
  <!-- ================================================================== -->
  <target name="compile-test" depends="compile" if="test.available">
    <javac 
     encoding="${build.encoding}" 
     srcdir="${src.test}"
     includes="**/*.java"
     destdir="${build.test}"
     debug="${debug}">
      <classpath refid="test.classpath"/>
    </javac>    
  </target>

  <!-- ================================================================== -->
  <!-- Run unit tests                                                     --> 
  <!-- ================================================================== -->
  <target name="test" depends="compile-test" if="test.available"
        description="Run tests">

    <junit printsummary="yes" haltonfailure="no" fork="yes"
      errorProperty="tests.failed" failureProperty="tests.failed">
      <sysproperty key="test.data" value="${build.test}/data"/>
      <sysproperty key="test.input" value="${root}/data"/>
      <classpath refid="test.classpath"/>
      <formatter type="plain" />
      <batchtest todir="${build.test}" unless="testcase">
        <fileset dir="${src.test}"
                 includes="**/Test*.java" excludes="**/${test.exclude}.java" />
      </batchtest>
      <batchtest todir="${build.test}" if="testcase">
        <fileset dir="${src.test}" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>

    <fail if="tests.failed">Tests failed!</fail>

  </target>   

  <!-- ================================================================== -->
  <!-- build war file --> 
  <!-- ================================================================== -->
  <target name="war" depends="compile, compile-plugins"
        description="Builds nutchwax war" >
    <!--Copy our nutchwax nutch-site.xml template into the build dir as
    nutch-site.xml.  Then in the below, add it into the WEB-INF/classes dir.
    -->
    <war destfile="${build.dir}/${name}.war" webxml="${this.web}/web.xml">
      <fileset dir="${nutch.web}/jsp">
        <exclude name="**/search.jsp"/>
        <exclude name="**/web.xml"/>
        <exclude name="**/refine*.xml"/>
        <!--Don't copy these over until they jsp compile.-->
        <exclude name="**/cluster.jsp"/>
        <exclude name="**/refine-query*"/>
      </fileset>
      <fileset dir="${this.web}">
        <exclude name="**/web.xml"/>
      </fileset>
      <classes dir="${nutch.root}/conf" >
        <exclude name="**/*.template"/>
      </classes>
      <classes dir="${root}/conf">
        <exclude name="**/*.template"/>
      </classes>
      <classes dir="${nutch.web}/locale"/>
      <classes file="${this.web}/log4j.properties"/>
      <lib dir="${root}/lib">
	    <include name="archive-commons-*.jar" />
      </lib>
      <lib dir="${nutch.root}/build">
        <include name="nutch*.jar"/>
      </lib>
      <lib dir="${nutch.root}/lib">
        <include name="lucene*.jar"/>
        <include name="hadoop*.jar"/>
        <include name="taglibs-*.jar"/>
        <include name="dom4j-*.jar"/>
        <include name="xerces-*.jar"/>
        <include name="log4j-*.jar"/>
        <include name="commons-lang-*.jar"/>
        <include name="commons-cli-*.jar"/>
        <include name="commons-logging-*.jar"/>
      </lib>
      <!--Copy into place the nutchwax classes.-->
      <zipfileset prefix="WEB-INF/classes"
            dir="${root}/build/classes/" />

      <!--Be selective about plugins to copy. Shrinks size of webapp.
       -->
      <zipfileset prefix="WEB-INF/classes/plugins"
            dir="${nutch.root}/build/plugins">
        <include name="analysis-*/**" />
        <include name="clustering-*/**" />
        <include name="language-*/**" />
        <include name="lib-lucene-*/**" />
        <include name="lib-log4j-*/**" />
        <include name="lib-regex-*/**" />
        <include name="microformats-*/**" />
        <include name="nutch-*/**" />
        <include name="query-*/**" />
        <include name="urlfilter-*/**" />
        <include name="urlnormalizer-*/**" />
        <include name="summary-*/**" />
        <include name="urlfilter-*/**" />
      </zipfileset>
      <zipfileset prefix="WEB-INF/classes/plugins"
          dir="${root}/build/wax-plugins"/>
      <webinf dir="${nutch.root}/lib">
	    <include name="taglibs-*.tld"/>
      </webinf>
    </war>
   </target>


  <!-- ================================================================== -->
  <!-- Clean.  Delete the build files, and their directories              -->
  <!-- ================================================================== -->
  <target name="clean" description="Clean up all built">
    <delete dir="${build.dir}"/>
  </target>

</project>
