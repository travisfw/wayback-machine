<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<properties>
		<author email="brad.AT.archive.DOT.org">Brad Tofel</author>
		<title>User Manual</title>
	</properties>
	<meta name="keyword" content="wayback machine, heritrix, java"/>
	<body>
		<section name="Introduction">
			<p>
				The Wayback Machine is a pure Java application that allows
				web browsers to access and search content stored in a set of ARC
				files.
			</p>
			<p>
				This manual provides basic information about downloading,
				installing, configuring and using the Wayback Machine.
			</p>
			<p>
				Setting up an instance of the Wayback Machine software will
				require several steps:
				<ol>
					<li>
						Preflight checklist: Do you have everything you need?
					</li>
					<li>
						Download the software.
					</li>
					<li>
						Determine how you will use the software: Replay,
						ResourceStore, ResourceIndex
					</li>
					<li>
						Install and Configure the software.
					</li>
					<li>
						Preparing your index data.
					</li>
					<li>
						Use the software.
					</li>
				</ol>
			</p>
		</section>
		<section name="Preflight Checklist">
			<p>
				Make sure you've satisfied all the 
				<a href="requirements.html">
					Requirements
				</a>
				first.
			</p>
		</section>
		<section name="Downloading">
			<p>
				Stable point releases of this software are available on 
				sourceforge.net. You can download the binary distribution of 
				the Wayback Machine via 
				<a href="http://sourceforge.net/project/showfiles.php?group_id=118427">
					this page
				</a>
				.
			</p>
			<p>
				You can find the latest version available from our continuous
				build box
				<a href="http://builds.archive.org:8080/cruisecontrol/buildresults/HEAD-archive-access">
					here
				</a>
			    .  Builds obtained here are not guaranteed stable.  Use
                with caution.
			</p>
			<p>
				Once you have downloaded the .tar.gz or .zip file from 
				sourceforge, you will need to unpack the file to access the
				webapp file, <b>wayback.war</b>.
			</p>
		</section>
		<section name="Determining how you will use the software: Replay Mode">
			<p>
				The Wayback Machine provides two types of web browser-based
				access to the content in ARC files: Query access, and 
				Replay access.
			</p>
			<p>
				Query access allows users to locate	resources stored in ARC
				files within the ResourceStore matching a particular query.
				At present, the only criteria that can be specified in 
				queries to filter returned documents are URL based filters,
				and capture date. It is expected that in future releases of
				the Wayback Machine, users will be able to locate documents 
				via full text search. See the 
				<a href="http://archive-access.sourceforge.net/projects/nutch/wayback.html">
                    NutchWAX project
				</a>
				for more information on full text search and the Wayback
				Machine.
			</p>
			<p>
				Replay access allows users to actually view resources in the
				ResourceStore within their web browser. There are three Replay
				modes currently available with the Wayback Machine: 
				<b>Archival URL</b>, <b>Proxy</b>, and <b>Timeline</b>.
			</p>
			<p>
				Before installing the Wayback Machine application, you will
				need to	choose which Replay mode you want to use. The three
				replay modes are described below.
			</p>
			<subsection name="Archival URL Replay mode">
				<p>
					Archival URL Replay mode uses a modified URL to designate
					documents stored in ARC files. The general form of an 
					Archival URL is:
					<p>
						<code>
							http://HOSTNAME:PORT/CONTEXT/TIMESTAMP/URL
						</code>
					</p>
					where
					<ul>
						<li>
							HOSTNAME is the host where the Wayback Machine is
							running.
						</li>
						<li>
							PORT is the port where Tomcat is listening for 
							incoming HTTP requests.
						</li>
						<li>
							CONTEXT is the context where the Wayback Machine
							webapp has been deployed.
						</li>
						<li>
							TIMESTAMP is 0 to 14 digits of a date, possibly
							followed by an asterisk ('*'). The format of a 
							TIMESTAMP is:
							<p>
								<code>
									YYYYMMDDHHmmss
								</code>
							</p>
							where
							<ul>
								<li>
									YYYY represents a 4-digit year
								</li>
								<li>
									MM represents a 2-digit, 1-based month 
									(Jan = 1 - Dec = 12)
								</li>
								<li>
									DD represents a 2-digit day of the month
									(01-31)
								</li>
								<li>
									HH represents a 2-digit hour (01-24)
								</li>
								<li>
									mm represents a 2-digit minute (00-59)
								</li>
								<li>
									ss represents a 2-digit second (00-59)
								</li>
							</ul>
							The following are example dates expressed as 
							14-digit Timestamps:
							<p>
								Jan 13, 1999 03:34:35 (am GMT) - 19990113033435
							</p>
							<p>
								Dec 31, 2004 23:01:00 (pm GMT) - 20041231230100
							</p>
						</li>
						<li>
							URL represents the actual URL that should be 
							replayed.
						</li>
					</ul>
					<p>
						Here is an example Archival URL (on an assumed host 
						wayback-ng.archive.org) for	www.yahoo.com on Dec 31, 
						1999 at 12:00:00
						<p>
							<code>
								http://wayback-ng.archive.org/19991231120000/http://www.yahoo.com/
							</code>
						</p>
					</p>
					<p>
						Archival URL mode allows replay of all versions captured
						of a particul URL, by modifying the Timestamp. When an
						Archival URL Replay request is recieved for a URL, the
						Wayback Machine will replay the closest version in time
						to the Timestamp requested of the particular URL.
					</p>
					<p>
						HTML documents returned in Archival URL Replay mode are 
						modified from the original version to provide a replay 
						experience more consistant to viewing the original
						content. This is accomplished by the insertion of 
						Javascript, which executes in the client browser after 
						the page has loaded. This Javascript modifies most URLs
						within the HTML page, both Anchors (links) as well as
						embedded content (images, applets, etc) so that they 
						become appropriate requests back to the Wayback Machine.
					</p>
					<p>
						This Javascript is imperfect: sometimes requests 
						"leak" to the live web temporarily, before the 
						Javascript has executed. Also, not all URLs are 
						rewritten correctly, especially URLs that are created 
						by Javascript that was in the original page, and 
						specialized file types containing links like Flash and
						PDF documents.
					</p>
				</p>
			</subsection>
			<subsection name="Proxy Replay mode">
				<p>
					Proxy Replay mode works by configuring a client browser to
					proxy all HTTP requests through the Wayback Machine 
					application. Instead of retrieving documents from the live
					web, the Wayback Machine will retrieve documents from the
					local repository of ARC files.
				</p>
				<p>
					Proxy Replay mode does not suffer from the shortcomings of
					the inserted Javascript that the Archival URL mode uses,
					but it has one major drawback: there is no way to
					specify which version of a captured document should 
					be replayed. Only the URL to be replayed is sent from the 
					client browser to the Wayback Machine - no date information
					is sent with the request.
				</p>
				<p>
					In Proxy Replay mode, the Wayback Machine will return the 
					most recent version captured of any requested page. This 
					behavior can be changed by using the Firefox-specific plugin
					developed by Oskar Grenholm. You can find out more about 
					this plugin and download it 
					<a href="http://archive-access.sourceforge.net/projects/waxtoolbar/">
						here
					</a>.
				</p>
				<p>
				Thanks Oskar!
				</p>
			</subsection>
			<subsection name="Timeline Replay mode">
				<p>
					Timeline Replay mode provides an interface similar to the
					<a href="http://archive-access.sourceforge.net/projects/wera/">
						WERA
					</a>
					access tool, where a timeline is visible at the top of every
					page viewed in the Wayback. This timeline illustrates which
					versions are available, and provides the capability to
					access other versions of the same document, including the
					ability to scroll forwards and backwards in time.
				</p>
				<p>
					Timeline Replay mode is still under testing, and sites with
					frames may not work well. It currently uses Javascript to
					rewrite links within pages, so this mode suffers from the
					same set of problems found in Archival Url mode. If you find
					problems with this mode, please provide feedback via the
					archive-access discussion list.
				</p>
			</subsection>
		</section>
		<section name="Determining how you will use the software: ResourceStore">
			<p>
				The Wayback Machine provides access to resources, which must
				(currently) be stored in a set of ARC files. The module that
				provides access for the Wayback Machine to this set of 
				resources is called the <b>ResourceStore</b>.
			</p>
			<p>
				There are two ResourceStore implementations you can 
				choose from, depending on how many ARC files you have and 
				where they are stored. If all your ARC files fit in a single
				directory, you can use the <b>LocalARCResourceStore</b>
				implementation, otherwise you will need to use the 
				<b>Http11ResourceStore</b> implementation.
			</p>
			<p>
				If you use the Http11ResourceStore, you will need to:
				<ol>
					<li>
						Set up a singleton ArcProxy webapp. This webapp
						maintains a BDB that maps ARC filenames to their
						actual absolute URL, and creates an indirection, so
						all ARC files are accessible within a single HTTP
						exported directory.
					</li>
					<li>
						Export your ARC files via HTTP 1.1, on all hosts 
						that hold them,	to the node running the ArcProxy
						webapp. Some examples of HTTP 1.1 webservers you can
						use to export your ARC files are <b>Apache</b>,
						<b>Tomcat</b>, and <b>thttpd</b>. Any other 
						webserver that supports HTTP 1.1 will also work.
					</li>
					<li>
						Populate the ArcProxy BDB with the locations of all
						ARC files in your repository. See instructions for
						the using <b>location-client</b> command-line tool,
						within this document, to populate the ArcProxy BDB.
					</li>
				</ol>
			</p>
		</section>
		<section name="Determining how you will use the software: ResourceIndex">
			<p>
				In order to quickly search	for documents requested by 
				users, the Wayback Machine needs a list of all the resources
				stored in the ResourceStore. The module that provides access
				for the Wayback Machine to this list of resources is 
				called the <b>ResourceIndex</b>.
			</p>
			<p>
				<b>ResourceIndex</b> Options:
				<ul>
					<li>
						<b>Local-BDB</b>: This ResourceIndex is good for 
						smaller scale installations, up to 10's of millions
						of documents, and allows for fast incremental 
						updates to the index. It also allows for automated
						index updating.
					</li>
					<li>
						<b>Local-CDX</b>: This ResourceIndex is good for
						larger scale installations, bounded mostly by the
						size of the index you can (first create, and later) 
						store on a single machine. Using the command line
						tool <b>index-client</b>, and the standard UNIX 
						<b>sort</b>	tool(see note below on LC_ALL), you create
						one or more sorted flat text files that are searched on
						each request. Building these sorted files, and updating
						the ResourceIndex are manual operations presently.
					</li>
					<li>
						<b>Remote-Nutch</b>: This ResourceIndex option 
						allows you to query a Nutch full-text search engine.
						This ResourceIndex option is highly experimental. 
						For help setting up a Remote-Nutch ResourceIndex,
						please see
						<a href="http://archive-access.sourceforge.net/projects/nutch/wayback.html">
							this page.
						</a>
					</li>
					<li>
						<b>Remote-BDB/CDX</b>: This ResourceIndex option 
						allows hosting of a ResourceIndex on a machine other
						than the machine hosting the Wayback webapp. It also
						allows a single ResourceIndex to be shared by 
						multiple Wayback webapps. For example, you can set
						up one Wayback webapp for each Replay Mode, and have
						all of those installations access a single 
						ResourceIndex using this option.
					</li>
				</ul>
			</p>
		</section>
		<section name="Installing and Configuring">
			<p>
				Installation and configuration of this software involves the
				following steps:
				<ol>
					<li>
						Placing .war file in appropriate location.
					</li>
					<li>
						Waiting for Tomcat to unpack the .war file.
					</li>
					<li>
						Customizing base web.xml file.
					</li>
					<li>
						Restarting tomcat.
					</li>
				</ol>
			</p>
			<subsection name="Archival URL mode installation">
				<p>
					By default, the wayback.war file is configured to operate
					in Archival URL mode. It can be installed by simply placing
					the wayback.war file into Tomcat's <b>webapps/</b> 
					directory.
				</p>
				<p>
					If you need to run the Wayback Machine application in a
					context path besides <b>wayback</b>, you will need to rename
					the wayback.war file to <i>CONTEXT</i>.war before placing 
					it in the <b>webapps/</b> directory. When Tomcat deploys
                    the webapp, it will be accessible via <i>CONTEXT/</i>.
				</p>
			</subsection>
			<subsection name="Timeline mode installation">
				<p>
					This mode has the same procedure as Archival URL mode 
					installation. Please follow the instructions found there,
					but you will need to modify the default web.xml file before
					using this mode.
				</p>
			</subsection>
			<subsection name="Proxy mode installation">
				<p>
					Running the Wayback Machine in proxy mode requires the
					webapp to run as the ROOT context, so you will need to 
					rename wayback.war to ROOT.war before placing it in the
					<b>webapps/</b> directory. If you have another ROOT webapp
					installed, you might want to move it out of the way before 
					putting the ROOT.war (which was originally wayback.war) 
					into place, but this is not required. If you do not move the
					old ROOT/ (and possibly the <i>old</i> ROOT.war) out of the
                    way, they may be overwritten when Tomcat deploys the new
                    ROOT webapp.
                    <ol>
						<li>
							shutdown Tomcat
						</li>
						<li>
							<i>(optionally)</i> move old ROOT/ and/or ROOT.war elsewhere.
						</li>
						<li>
							rename the wayback.war to ROOT.war in the webapps 
							directory (where TOMCAT_HOME is the path where you 
							installed Tomcat):
							<p>
								<code>
									mv wayback.war TOMCAT_HOME/webapps/ROOT.war
								</code>
							</p>
						</li>
						<li>
							start Tomcat. You will shutdown Tomcat again in
							a moment to configure the web.xml file, but for 
							now, we need Tomcat to unpack the .war file, 
							which requires a startup.
						</li>
					</ol>
				</p>
			</subsection>
			<subsection name="Modifying the base web.xml file">
				<p>
					Once you have installed the .war file under the Tomcat 
					webapps directory, and the webapp has been deployed, you 
					may need to modify the web.xml file to customize your 
					Wayback installation.
				</p>
				<p>
					There are 4 main categories of customizations:
					<ol>
						<li>
							User Interface(Archival URL, Timeline, or Proxy)
						</li>
						<li>
							Resource Store (Local ARCs, or HTTP 1.1 ARC access)
						</li>
						<li>
							Resource Index (Local BDB, Local CDX, Remote Nutch,
							Remote BDB/CDX)
						</li>
						<li>
							Resource Index Exclusions (None, Robots.txt, Manual
							Exclusions and Robots.txt)
						</li>
					</ol>
					Within the web.xml file, there are comments indicating each
					main configuration section. Within each section, all options
					are present, but non-default options are commented out.
				</p>
				<p>
					You can alter the active options by commenting out the 
					default option for a section, and uncommenting another
					option. Within each option, there are further customizable
					configurations. For information about these other options,
					please refer to the table below. After making any changes to
					the web.xml file, you will need to restart Tomcat.
				</p>
			</subsection>

			<subsection name="User Interface Customizations">

				<p>
					Archival URL UI options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								jsuri
							</td>
							<td>
								http://localhost:8080/wayback/wm.js
							</td>
							<td>
								Absolute URL of page rewriting Javascript. This 
								value will be written into all returned HTML pages,
								so will need to be changed to the absolute location
								where your Wayback Machine is running.
							</td>
						</tr>
						<tr>
							<td>
								replayuriprefix
							</td>
							<td>
								http://localhost:8080/wayback
							</td>
							<td>
								HTTP URI prefix for the replay UI. This should be 
								the name and port of the Tomcat hosting this webapp,
								plus the name of the context where this webapp is
								installed.
							</td>
						</tr>
					</table>
				</p>
				<p>
					Timeline UI options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								jsuri
							</td>
							<td>
								http://localhost:8080/wayback/jsp/TimelineUI/wm-timeline.js
							</td>
							<td>
								Absolute URL of page rewriting Javascript. This 
								value will be written into all returned HTML pages,
								so will need to be changed to the absolute location
								where your Wayback Machine is running.
							</td>
						</tr>
						<tr>
							<td>
								replayuriprefix
							</td>
							<td>
								http://localhost:8080/wayback/replay
							</td>
							<td>
								HTTP URI prefix for the replay UI. This should be 
								the name and port of the Tomcat hosting this webapp,
								plus the name of the context where this webapp is
								installed, plus the path "replay".
							</td>
						</tr>
						<tr>
							<td>
								metauriprefix
							</td>
							<td>
								http://localhost:8080/wayback/meta
							</td>
							<td>
								HTTP URI prefix for the replay UI. This should be 
								the name and port of the Tomcat hosting this webapp,
								plus the name of the context where this webapp is
								installed, plus the path "meta".
							</td>
						</tr>
						<tr>
							<td>
								timelineuriprefix
							</td>
							<td>
								http://localhost:8080/wayback/timeline
							</td>
							<td>
								HTTP URI prefix for the replay UI. This should be 
								the name and port of the Tomcat hosting this webapp,
								plus the name of the context where this webapp is
								installed, plus the path "timeline".
							</td>
						</tr>
						<tr>
							<td>
								frameseturiprefix
							</td>
							<td>
								http://localhost:8080/wayback/frameset
							</td>
							<td>
								HTTP URI prefix for the replay UI. This should be 
								the name and port of the Tomcat hosting this webapp,
								plus the name of the context where this webapp is
								installed, plus the path "frameset".
							</td>
						</tr>
					</table>
				</p>
				<p>
					Proxy UI options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								query.localhostname
							</td>
							<td>
								
							</td>
							<td>
								extra hostname that should be considered "local"
								when discriminating between Replay and Query
								requests. If you use DNS aliases to refer to
								this host, then the fully qualified alias 
								(ex: wayback.archive.org) used to access the 
								Wayback proxy service should be used here.
							</td>
						</tr>
						<tr>
							<td>
								proxy.redirectpath
							</td>
							<td>
								http://localhost:8080/jsp/QueryUI/Redirect.jsp
							</td>
							<td>
								absolute URL to jsp where requests are bounced 
								through to pick up timestamps
							</td>
						</tr>
					</table>
				</p>
			</subsection>
			<subsection name="Resource Store Customizations">

				<p>
					Local ARC options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								resourcestore.arcpath
							</td>
							<td>
								/tmp/wayback/arcs
							</td>
							<td>
								Directory where ARC files are found (possibly 
								where Heritrix writes them.) This directory must
								exist.
							</td>
						</tr>
						<tr>
							<td>
								resourcestore.autoindex
							</td>
							<td>
								1
							</td>
							<td>
								If this is set to '1', then a background thread
								is launched that detects new ARC files appearing
								in <b>resourcestore.arcpath</b>. New ARCs are
								indexed, and a CDX flat file, with one line per
								ARC Record is created, one CDX file per ARC.
								These CDX files are then handed off to the 
								ResourceIndex for incorporation into the index.
							</td>
						</tr>
						<tr>
							<td>
								resourcestore.tmppath
							</td>
							<td>
								/tmp/wayback/arc-indexer/tmp
							</td>
							<td>
								Directory where CDX files are created 
								temporarily. This is a scratch space directory,
								which must exist.
							</td>
						</tr>
						<tr>
							<td>
								resourcestore.workpath
							</td>
							<td>
								/tmp/wayback/arc-indexer/work
							</td>
							<td>
								Directory which holds empty flag files 
								indicating that ARC files are waiting to be
								indexed. This directory must exist.
							</td>
						</tr>
						<tr>
							<td>
								resourcestore.queuedpath
							</td>
							<td>
								/tmp/wayback/arc-indexer/queued
							</td>
							<td>
								Directory which holds empty flag files 
								indicating that ARC files have already been seen
								and queued for indexing. This directory must
								exist.
							</td>
						</tr>
						<tr>
							<td>
								resourcestore.indextarget
							</td>
							<td>
								/tmp/wayback/index-data/incoming
							</td>
							<td>
								Directory or URL where CDX files are sent after
								they are created. If the value of this parameter
								begins with http://, then the value is assumed
								to be a URL where CDX files are PUT, on a
								possibly remote resourceindex node. If the value
								does not begin with http://, then the value is
								assumed to be a local directory, which must
								exist, where completed CDX files are moved for
								incorporation into the index.
							</td>
						</tr>
						<tr>
							<td>
								resourcestore.indexinterval
							</td>
							<td>
								10000
							</td>
							<td>
								Millisecond interval between checks for new ARCs
								that need to be processed. This is only the
								initial time slept when first starting up, and 
								after any new files are found. Each interval
								that no new ARCs are detected, the duration 
								slept increases by this amount.
							</td>
						</tr>
					</table>
				</p>
				<p>
					Remote-HTTP1.1 options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								resourcestore.arcurlprefix
							</td>
							<td>
								http://localhost:8080/arc-proxy/arcs
							</td>
							<td>
								Absolute URL of the ArcProxy webapp which 
								reverse proxies HTTP 1.1 requests to the actual
								location of ARC files.
							</td>
						</tr>
					</table>
				</p>
				<p>
					ArcProxy/LocationDB options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								filelocationdb.path
							</td>
							<td>
								/tmp/wayback/arc-db
							</td>
							<td>
								Directory where the filelocation BDB, which maps
								ARC filenames to their absolute HTTP path(s), is
								stored. Must exist.
							</td>
						</tr>
						<tr>
							<td>
								filelocationdb.logpath
							</td>
							<td>
								/tmp/wayback/arc-db.log
							</td>
							<td>
								Path where log of new ARCs inserted into the 
								filelocation db are stored. Containing directory
								must exist.
							</td>
						</tr>
					</table>
				</p>
			</subsection>

			<subsection name="Resource Index Customizations">

				<p>
					Local BDB options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.indexpath
							</td>
							<td>
								/tmp/wayback/index
							</td>
							<td>
								Directory to where BDB files are stored. This 
								directory must exist.
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.incomingpath
							</td>
							<td>
								/tmp/wayback/index-data/incoming
							</td>
							<td>
								BDB index-specific configuration that indicates
								new CDX format flat files will appear in the 
								directory named in the value of this param. If
								this configuration is present and non-empty, a 
								background thread will be started that monitors
								this directory, and adds CDX records in files 
								found in this directory to the index.
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.mergedpath
							</td>
							<td>
								/tmp/wayback/index-data/merged
							</td>
							<td>
								If this value is present and non-empty, then CDX
								files that are successfully processed from 
								incoming are moved to this directory after 
								merging. If this option is missing or blank, CDX
								files are deleted after merging.
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.failedpath
							</td>
							<td>
								/tmp/wayback/index-data/failed
							</td>
							<td>
								If this value is present and non-empty, then CDX
								files that fail to parse successfully are moved
								to this directory after a single attempt. If 
								this option is missing or blank, malformed CDX
								files are left in the incoming directory and 
								repeatedly re-attempted until some other process
								moves them out of the way or fixes them.
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.mergeinterval
							</td>
							<td>
								10000
							</td>
							<td>
								Millisecond interval between checks for new 
								files in the incoming directory. This is only
								the starting number, when no new files are
								found in the directory. Each subsequent interval
								will increase by this number of ms, until a file
								is found, at which point the interval will 
								revert to the initial level.
							</td>
						</tr>
						<tr>
							<td>
								maxresults
							</td>
							<td>
								1000
							</td>
							<td>
								Maximum number of results to return from the 
								ResourceIndex.
							</td>
						</tr>
					</table>
				</p>
				<p>
					Local CDX options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.cdxpaths
							</td>
							<td>
								/tmp/wayback/index/index.cdx
							</td>
							<td>
								One or more comma-separated paths pointing to
								sorted CDX files that contain index information
								for this Wayback installation.
							</td>
						</tr>
						<tr>
							<td>
								maxresults
							</td>
							<td>
								1000
							</td>
							<td>
								Maximum number of results to return from the
								ResourceIndex.
							</td>
						</tr>
					</table>
				</p>
				<p>
					Remote Nutch Index options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.baseurl
							</td>
							<td>
								http://localhost:8081/xmlquery
							</td>
							<td>
								Absolute URL to Nutch server.
							</td>
						</tr>
						<tr>
							<td>
								maxresults
							</td>
							<td>
								1000
							</td>
							<td>
								Maximum number of results to return from the
								ResourceIndex.
							</td>
						</tr>
					</table>
				</p>
				<p>
					Remote BDB/CDX Resource Index options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.baseurl
							</td>
							<td>
								http://localhost:8080/xmlquery
							</td>
							<td>
								Absolute URL to the Wayback Machine Resource
								Index service.
							</td>
						</tr>
						<tr>
							<td>
								maxresults
							</td>
							<td>
								1000
							</td>
							<td>
								Maximum number of results to return from the
								ResourceIndex.
							</td>
						</tr>
					</table>
				</p>
			</subsection>
			<subsection name="Resource Index Exclusion Customizations">
				<p>
					Administrative Plus Robots.txt Exclusions options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.exclusionua
							</td>
							<td>
								ia_archiver
							</td>
							<td>
								UserAgent to have exclusion service check 
								access with.
							</td>
						</tr>
						<tr>
							<td>
								adminexclusion.dbpath
							</td>
							<td>
								/tmp/wayback/admin
							</td>
							<td>
								Directory where BDB files that store manual 
								exclusion data are stored.
							</td>
						</tr>
						<tr>
							<td>
								robotdbpath
							</td>
							<td>
								/tmp/wayback/robotsdb
							</td>
							<td>
								Directory where BDB files that store cached 
								robots.txt document information are stored.
							</td>
						</tr>
						<tr>
							<td>
								robotarcdir
							</td>
							<td>
								/tmp/wayback/robot-arcs
							</td>
							<td>
								Directory where ARC files containing cached 
								robots.txt documents are stored.
							</td>
						</tr>
						<tr>
							<td>
								robotarcprefix
							</td>
							<td>
								live-robots
							</td>
							<td>
								Filename prefix for generated ARC files holding
								robot.txt documents.
							</td>
						</tr>
						<tr>
							<td>
								tempdir
							</td>
							<td>
								/tmp/wayback/robot-temp
							</td>
							<td>
								Directory where robots.txt documents are store
								temporarily before they are written to ARC 
								files.
							</td>
						</tr>
					</table>
				</p>
				<p>
					Robots.txt Exclusions options:
					<table>
						<tr>
							<td>
								Option
							</td>
							<td>
								Default value
							</td>
							<td>
								Description
							</td>
						</tr>
						<tr>
							<td>
								resourceindex.exclusionua
							</td>
							<td>
								ia_archiver
							</td>
							<td>
								UserAgent to have exclusion service check 
								access with.
							</td>
						</tr>
						<tr>
							<td>
								robotdbpath
							</td>
							<td>
								/tmp/wayback/robotsdb
							</td>
							<td>
								Directory where BDB files that store cached 
								robots.txt document information are stored.
							</td>
						</tr>
						<tr>
							<td>
								robotarcdir
							</td>
							<td>
								/tmp/wayback/robot-arcs
							</td>
							<td>
								Directory where ARC files containing cached 
								robots.txt documents are stored.
							</td>
						</tr>
						<tr>
							<td>
								robotarcprefix
							</td>
							<td>
								live-robots
							</td>
							<td>
								Filename prefix for generated ARC files holding
								robot.txt documents.
							</td>
						</tr>
						<tr>
							<td>
								tempdir
							</td>
							<td>
								/tmp/wayback/robot-temp
							</td>
							<td>
								Directory where robots.txt documents are store
								temporarily before they are written to ARC 
								files.
							</td>
						</tr>
					</table>
				</p>

			</subsection>
		</section>
		<section name="Preparing the ResourceIndex">
			<subsection name="Local BDB ResourceIndex Preparation">
				<p>
					How to set up your ResourceIndex depends on whether you are
					using the LocalARC ResourceStore or the Http11
					ResourceStore. In both cases, the actual index database
					files will be stored on the machine running the Wayback
					webapp. If you did not set a value for the
					<b>resourceindex.incomingpath</b> configuration, then no
					automatic updating of the ResourceIndex will occur. In this
					case, you can still manually update the BDB ResourceIndex
					using the <b>bdb-client</b> command-line tool. The rest of
					this section assumes that the
					<b>resourceindex.incomingpath</b> has been set.
				</p>
				<p>
					Any file placed in the <b>resourceindex.incomingpath</b>
					will be interpreted as a CDX file containing index
					information about ARC files in the collection, and will be
					merged into the BDB automatically. There are 3 ways to get
					CDX format files into this directory:
					<ol>
						<li>
							A LocalARC ResourceStore with the 
							<b>resourcestore.autoindex</b> configuration set to
							'1' will automatically notice new ARC files in 
							the directory named by <b>resourcestore.arcpath</b>.
							Each new ARC will have a CDX file generated and
							placed in the <b>resourceindex.incomingpath</b>
							directory. This combination should not require human
							interaction to automatically index new ARC content
							to be viewed with the Wayback as it appears in the
							<b>resourcestore.arcpath</b> directory.
						</li>
						<li>
							If you are not using a LocalARC ResourceStore, then
							you will need to manually use the
							<b>index-client</b> command-line tool to index your
							ARC files. The <b>index-client</b> has the
							capability to HTTP PUT CDX data directly into the
							<b>resourceindex.incomingpath</b> directory.
						</li>
						<li>
							You can manually place files in the
							<b>resourceindex.incomingpath</b> directory.
						</li>
					</ol>
				</p>
			</subsection>
			<subsection name="Local CDX ResourceIndex Preparation">
				<p>
					Using a CDX ResourceIndex should allow you to generate and
					search indexes of a much larger size than a BDB index, but
					there are tradeoffs. Generating and updating the CDX files
					will be more difficult.
				</p>
				<p>
					To generate a CDX index, run the <b>index-client</b> tool on
					each ARC file in your collection, and send all the output to
					the GNU <b>sort</b> utility (with the -u option). The output
					of the <b>sort</b> utility is the final CDX file that can be
					used with the Wayback. Be sure that the environment variable
					<b><i>LC_ALL</i></b> is set to <b><i>C</i></b> before 
					running the <b>sort</b> tool.
				</p>
			</subsection>
		</section>
		<section name="Command Line Tools">
			<p>
				The wayback distribution includes several command-line tools
				that assist in creating and testing index files, and populating
				the ArcProxy location db.
			</p>
			<p>
				All the command line tools can be found which can be found 
				underneath the directory where you unpacked your distribution
				at:<b>bin/*</b> (example: <i>bin/location-client</i>). You will
				need to change permissions on the tools to allow them to be
				executed:
			</p>
			<p>
				<code>
					chmod a+x bin/*
				</code>
			</p>
			<subsection name="bdb-client">
				<p>
					This tool allows several maintenance operations to be 
					performed on BDB files. There are two primary modes, read 
					and write.
					<ol>
						<li>
							<code>
								bin/bdb-client -r BDB_DIR BDB_NAME [PREFIX]
							</code>
							<p>
								Output records from a BDB database on STDOUT.
							</p>
							<p>
								where:
								<ul>
									<li>
										<i>BDB_DIR</i> Open BDB in this
										directory.
									</li>
									<li>
										<i>BDB_NAME</i> Open BDB with this name.
									</li>
									<li>
										<i>PREFIX</i> (optional) if present, 
										only output records whose KEY begins 
										with PREFIX. If this option is omitted,
										all records will be output from the
										BDB. Records are always output in sorted
										order.
									</li>
								</ul>
							</p>
						</li>
						<li>
							<code>
								bin/bdb-client -w BDB_DIR BDB_NAME
							</code>
							<p>
								Read CDX format lines from STDIN, and insert
								into a BDB, creating the BDB if needed.
							</p>
							<p>
								where:
								<ul>
									<li>
										<i>BDB_DIR</i> Open BDB in this
										directory.
									</li>
									<li>
										<i>BDB_NAME</i> Open BDB with this name.
									</li>
								</ul>
							</p>
						</li>
					</ol>
				</p>
			</subsection>
			<subsection name="bin-search">
				<p>
					This tool allows binary searching against large sorted text 
					files. It will output lines prefixed with a particular 
					<i>key</i> on STDOUT.
				</p>
				<p>
					<code>
						bin/bin-search KEY FILE [FILE2 ...]
					</code>
					<ul>
						<li>
							<i>KEY</i> String prefix for lines that should be
							output.
						</li>
						<li>
							<i>FILE [FILE2 ...]</i> Sequentially search through
							each file specified, outputting the lines prefixed
							with KEY for each file. Note that the complete
							output of bin-search will be sorted when used with
							a single file, but when multiple files are searched,
							the results may not be sorted completely.
						</li>
					</ul>
				</p>
			</subsection>
			<subsection name="index-client">
				<p>
					This tool has two usages:
					<ol>
						<li>
							<code>
								bin/index-client ARC_PATH
							</code>
							<p>
								Generation of a CDX format index data for a 
								single ARC file named by ARC_PATH. The CDX 
								format data is sent to STDOUT, and can be saved
								to a file, sorted, etc. This is needed to
								generate sorted CDX format indexes.
							</p>
						</li>
						<li>
							<code>
								bin/index-client TMP_DIR INCOMING_URL LOCATION_URL ARC_DIR ARC_URL_PREFIX
							</code>
							<p>
								where:
								<ul>
									<li>
										<i>
											TMP_DIR
										</i>
										Temporary working directory where 
										ex.
										<b>
											/tmp/
										</b>
									</li>
									<li>
										<i>
											INCOMING_URL
										</i>
										HTTP path to the RemoteSubmitFilter 
										which allows remote submission of index
										data in CDX format for automatic merging
										with a BDB ResourceIndex.
										ex.
										<b>
											http://wayback-webapp.your-archive.org/wayback/index-incoming/
										</b>
									</li>
									<li>
										<i>
											LOCATION_URL
										</i>
										is the absolute URL where the ArcProxy can be 
										accessed. ex.
										<b>
											http://wayback-webapp.your-archive.org/arc-proxy/locationDB
										</b>
									</li>
									<li>
										<i>
											ARC_DIR
										</i>
										is the absolute path to the directory on the local
										machine which holds ARC files ex.
										<b>
											/2/arc-collection-1
										</b>
									</li>
									<li>
										<i>
											ARC_URL_PREFIX
										</i>
										is the absolute URL where the directory ARC_DIR can
										be accessed. ex.
										<b>
											http://arc-storage-node-1.your-archive.org/2/arc-collection-1/
										</b>
									</li>
								</ul>
							</p>
							<p>
								If you chose the Http11 ResourceStore, and are 
								using the BDB ResourceIndex implementation then
								you will need to run this script with these
								arguments once for each directory containing ARC
								files (on each machine containing ARC files.)
								For each ARC file found, this script will:
								<ol>
									<li>
										generate the plain-text index file for
										the ARC file
									</li>
									<li>
										push that plain-text file onto the
										machine running the Wayback webapp, 
										where the ResourceIndex database is 
										stored. The plain-text index files will
										arrive in the IndexPipeline directory
										structure so they are merged into the
										ResourceIndex.
									</li>
									<li>
										notify the ArcProxy LocationDB of the
										URL where the ARC file can be accessed,
										for later Replay requests which require
										access to documents in the ARC file.
									</li>
								</ol>
							</p>
						</li>
					</ol>
				</p>
			</subsection>
			<subsection name="location-client">
				<p>
					If you have already populated your ResourceIndex, and just
					need to inform the ArcProxy LocationDB of where ARC files
					are located. This script will allow you to synchronize the
					ArcProxy LocationDB with the directories holding your ARC
					files.
				</p>
				<p>
					Execute the script once for each directory containing
					ARC	files (on each machine containing ARC files.) Again, 
					this script will <b>not</b> index the content of the ARC 
					files, but will only populate the ArcProxy LocationDB with 
					the locations of ARC files.
				</p>
				<p>
					<code>
						bin/location-client sync LOCATION_URL ARC_DIR ARC_URL_PREFIX
					</code>
				</p>
				<p>
					where:
					<ul>
						<li>
							<i>
								LOCATION_URL
							</i>
							is the absolute URL where the ArcProxy can be 
							accessed. ex.
							<b>
								http://wayback-webapp.your-archive.org/arc-proxy/locationDB
							</b>
						</li>
						<li>
							<i>
								ARC_DIR
							</i>
							is the absolute path to the directory on the local
							machine which holds ARC files ex.
							<b>
								/2/arc-collection-1
							</b>
						</li>
						<li>
							<i>
								ARC_URL_PREFIX
							</i>
							is the absolute URL where the directory ARC_DIR can
							be accessed. ex.
							<b>
								http://arc-storage-node-1.your-archive.org/2/arc-collection-1/
							</b>
						</li>
					</ul>
				</p>
			</subsection>
			<subsection name="url-client">
				<p>
					URLs stored in BDB and CDX format ResourceIndexes are
					<i>canonicalized</i> to a more genertic form. Before 
					performing a lookup operation on the ResourceIndex, the same
					canonicalization function is applied to requested URLs. This
					tool will read space(" ") delimited lines from STDIN, and
					output the same lines on STDOUT, but with one column
					altered. The column that is changed is assumed to be a URL,
					and the version output is the canonicalized form of the
					input URL.
				</p>
				<p>
					This tool is mostly useful for debugging the 
					canonicalization function, but can also be used, if the
					canonicalization function is altered, to update an existing
					CDX index, without recreating CDX files from original ARCs.
				</p>
				<p>
					<code>
						bin/url-client [-cdx] [-f FIELD]
					</code>
					<ul>
						<li>
							<i>-cdx</i> Pass thru lines prefixed with " CDX "
							unchanged.
						</li>
						<li>
							<i>-f FIELD</i> alter column FIELD of each line,
							instead of the default column 1.
						</li>
					</ul>
				</p>
			</subsection>
		</section>
		<section name="Using">
			<subsection name="Archival URL mode usage">
				<p>
					Once you have customized the web.xml file, restarted
					Tomcat, and prepared your ResourceIndex, the Wayback Machine
					installation will be ready for use.
				</p>
				<p>
					In any case, you can immediately visit the context path
					where you deployed the Wayback Machine webapp, at:
					<b>http://HOSTNAME:PORT/CONTEXT</b>, ex: 
					<i>http://yourhost.yourdomain.org:8080/wayback</i>.

				</p>
				<p>
					You can search for pages in the index by typing the URL in
					the box 'Enter Web Address' and clicking "Take Me Back". To
					search for all pages within a website or website 
					sub-directory, or to search for pages between particular 
					dates, click the "Adv. Search" link.
				</p>
			</subsection>
			<subsection name="Proxy mode usage">
				<p>
					Before accessing the Wayback Machine using Proxy mode, you
					must configure the web browser that will access the service
					to proxy all HTTP requests through the webapp, using the 
					proxy URL which is the context path where you deployed the 
					Wayback Machine webapp, at:	<b>http://HOSTNAME:PORT/</b>, 
					ex: <i>http://yourhost.yourdomain.org:8080/</i>. For help on
					how to configure your browser to proxy HTTP requests through
					a proxy server, please consult the documentation for your
					web browser.
				</p>
				<p>
					You can access the Wayback Machine Query UI, which allows
					you to view the status of the server and query the index
					for documents, by pointing the browser at the same URL that 
					you configured as the proxy server. For information on 
					status, configurations and queries, please consult the 
					documentation for Using the Wayback Machine in Archival URL 
					mode. A common problem in Firefox Proxy configuration is 
					including the "http://": you do not include the "http://" 
					in the proxy server name.
				</p>
			</subsection>
			<subsection name="Timeline mode usage">
				<p>
					Once you have replaced and possibly customized the web.xml 
					file, restarted	Tomcat, and prepared your ResourceIndex, 
					the Wayback Machine	installation will be ready for use.
				</p>
				<p>
					You can start by visiting the front page of your Wayback
					service (see replayuriprefix in your web.xml file). Once you
					are at this page, you can type a URL into the search box
					near the top of the page, or use the Advanced Search page to
					perform more complex searches.
				</p>
				<p>
					Once you have located documents you would like to view with
					your searches, you can start using the Timeline mode by 
					clicking a link in the search results. This will load the
					timeline view for the specific page and time that you 
					selected. You can view different versions of any page by 
					clicking the timeline, and you can navigate to other pages
					in your collection by clicking links directly in the page
					below the timeline.
				</p>
				<p>
					By checking the "Metadata" box, you can view metadata 
					available for the particular document you are viewing. 
					Unchecking the box will return to normal view mode.
				</p>
			</subsection>
			
		</section>
	</body>
</document>
