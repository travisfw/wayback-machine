<?xml version="1.0" encoding="utf-8"?>
<document>
  <properties>
    <title>Administrators Manual</title>
    <author email="brad at archive dot org">Brad Tofel</author>
    <revision>$$Id$$</revision>
  </properties>
  
  <body>



    <section name="Requirements">


      <subsection name="Third Party Packages">
        <p>
          Please see the
          <a href="requirements.html">
            System Requirements
          </a>
          .
        </p>
      </subsection>


      <subsection name="Wayback Software">
        <p>
          Please see the
          <a href="downloads.html">
            Software Downloads page
          </a>
          .
        </p>
      </subsection>


    </section>



    <section name="Installing">


      <subsection name="Installing Tomcat">
        <p>
          Please refer to the README file included with your Tomcat distribution.
        </p>
      </subsection>


      <subsection name="Installing Wayback">
	      <p>
	        Once you have downloaded the .tar.gz file from 
	        sourceforge, you will need to unpack the file to access the
	        webapp file, <b>wayback-webapp-1.4.0.war</b>.
	      </p>
		    <p>
	        Installation and configuration of this software involves the
	        following steps:
	        <ol>
	          <li>
	            Placing .war file in appropriate location.
	          </li>
	          <li>
	            Waiting for Tomcat to unpack the .war file.
	          </li>
	          <li>
	            Customizing base wayback.xml file.
	          </li>
	          <li>
	            Restarting tomcat.
	          </li>
	        </ol>
	      </p>
      </subsection>
    </section>



    <section name="Wayback Configuration Overview">
      <p>
        The wayback software provides Query and Replay access to archived 
        documents. Query access allows users to locate particular documents
        within the collection by URL and date. Replay access allows users to
        view archived pages within their web browsers. Some Replay modes 
        require altering the original pages so embedded content is also loaded
        from the wayback service, and not from the live web.
      </p>
      <p>
        A WaybackCollection defines a set of archived documents and an index
        which allows documents to be located within the collection. A
        WaybackCollection may be exposed to end users through one or more
        AccessPoints, which define:
        <ul>
          <li>the WaybackCollection itself</li>
          <li>the URL where users can access the collection</li>
          <li>how users can query the collection (the Query UI)</li>
          <li>how documents are returned to users so they appear correctly in
            their web browsers (the Replay UI)</li>
          <li>the look and feel of the wayback user interface</li>
          <li>who can access the documents in the collection</li>
          <li>which documents from the collection are available</li>
        </ul>
      </p>
      <p>
        Wayback is configured using Spring IOC, to specify and configure
        concrete implementations of several basic modules. For information
        about using Spring, please see
        <a href="http://www.springframework.org/docs/reference/beans.html">
          this page
        </a>.
      </p>
      <subsection name="AccessPoint configuration options">
        <p>
          An AccessPoint's configuration must specify the following 
          implementations:
          <ul>
            <li><a href="WaybackCollection_Configuration"><b>collection</b></a>
                the specific WaybackCollection being exposed via this
                AccessPoint.
            </li>
            <li><a href="Query_UI"><b>query</b></a> responsible for generating
                user visible content in response to user Queries, HTML, XML,
                etc.</li>
            <li><a href="Replay_Modes"><b>replay</b></a> responsible for 
                determining the appropriate ReplayRenderer implementation based
                on the users request and the particular document to be 
                Replayed.</li>
            <li><b>uriConverter</b> responsible for constructing Replay URLs
                from records matching users queries. See Replay Modes below.
            </li>
            <li><b>parser</b> - responsible for translating incoming requests
                into WaybackRequests. See Replay Modes below.</li>
          </ul>
        </p>
        <p>
          An AccessPoint's configuration may optionally specify the following:
          <ul>
            <li><a href="Exception_Rendering"><b>exception</b></a> - an
                implementation responsible for generating error pages to users
            </li>
            <li>
              <a href="Adding_Additional_Configurations_to_an_AccessPoint">
                <b>configs</b>
              </a> - a Properties associating arbitrary key-value pairs which
               are accessible to .jsp files responsible for generating the UI
            </li>
            <li>
              <a href="Excluding_Documents_within_an_AccessPoint">
                <b>exclusionFactory</b>
              </a> - an implementation specifying what documents should be
              accessible within this AccessPoint
            </li>
            <li>
              <a href="Restricting_who_can_interact_with_an_AccessPoint">
                <b>authentication</b>
              </a> - an implementation specifying who is allowed to connect to
              this AccessPoint
            </li>
            <li><b>urlRoot</b> - a String URL prefix under which all UI
                elements should be referenced.
            </li>
            <li><b>locale</b> - A specific Locale to use for all requests
                within this AccessPoint, overriding the users preferred Locale
                as specified by their web browser.
            </li>
          </ul>
        </p>
        <p>
          AccessPoints can be used to provide different levels and types of
          access to the same collection for different users. For example, you
          can provide both Proxy and Archival URL mode access to a single
          collection by defining 2 AccessPoints with different Replay User 
          Interfaces but the same WaybackCollection. Using AccessPoints, you can
          also provide different levels of access to a collection. For example,
          users within a particular subnet may be able to access all documents
          within a collection via one AccessPoint, but users outside that subnet
          may be restricted to viewing documents allowed by a web sites current
          robots.txt file. 
        </p>
        <p>
          Please refer to 
          <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/wayback.xml">wayback.xml</a>
          within the wayback .war file for detailed example AccessPoint
          configurations.
        </p>
      </subsection>
      <subsection name="WaybackCollection Configuration">
        <p>
          A WaybackCollection's configuration must specify the following 
          implementations:
          <ul>
            <li><a href="resource_store.html">resourceStore</a> the specific
                implementation used to specific set of documents within this
                collection, and how to access them for Replay requests.</li>
            <li><a href="resource_index.html">resourceIndex</a> the specific
                implementation responsible for locating documents within the
                collection.</li>
          </ul>
        </p>
        <p>
          A WaybackCollection's configuration may optionally specify the
          following:
          <ul>
            <li>shutdownables - an List of one or more beans implementing
                org.archive.wayback.Shutdownable needed to maintain this
                WaybackCollection, typically Daemon Threads which perform
                automatic indexing operations on the resourceStore and the
                resourceIndex.</li>
          </ul>
        </p>
        <p>
          For more information on WaybackCollection configuration options and
          automatic indexing, please refer to the following documentation pages
          and to the example Spring .xml configuration files within the wayback
          .war:
          <ul>
            <li><a href="resource_store.html">ResourceStore configuration and
                automatic indexing</a></li>
            <li><a href="resource_index.html">ResourceIndex configuration</a></li>
            <li><a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/BDBCollection.xml">BDBCollection.xml</a></li>
            <li><a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/CDXCollection.xml">CDXCollection.xml</a></li>
            <li><a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/RemoteCollection.xml">RemoteCollection.xml</a></li>
            <li><a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/NutchCollection.xml">NutchCollection.xml</a></li>
          </ul>
        </p>
      </subsection>
    </section>

    <section name="Replay Modes">
      <p>
        There are presently 3 Replay modes supported by the Wayback software,
        Archival URL mode, Proxy mode, and an experimental DomainPrefix mode.
      </p>
      <subsection name="Archival URL Replay Mode">
        <p>
          Archival URL Replay mode uses a modified URL to designate
          documents stored in ARC/WARC files. The general form of an 
          Archival URL is:
          <br></br>
          <div>
            <code>
              http://HOSTNAME:PORT/CONTEXT/TIMESTAMP/URL
            </code>
          </div>
          <br></br>
          where
          <ul>
            <li>
              <b>HOSTNAME</b> is the host where the Wayback software is
              running.
            </li>
            <li>
              <b>PORT</b> is the port where Tomcat is listening for 
              incoming HTTP requests, which also refers to part of the name of
              the Access Point. See below for example CONTEXT mappings.
            </li>
            <li>
              <b>CONTEXT</b> is the context where the Wayback webapp has been
              deployed, plus the name of the Access Point. See below for
              example CONTEXT mappings.
            </li>
            <li>
              <b>TIMESTAMP</b> is 0 to 14 digits of a date, possibly
              followed by an asterisk ('*'). The format of a 
              TIMESTAMP is:
              <div>
                <code>
                  YYYYMMDDHHmmss
                </code>
              </div>
              where
              <ul>
                <li>
                  <b>YYYY</b> represents a 4-digit year
                </li>
                <li>
                  <b>MM</b> represents a 2-digit, 1-based month 
                  (Jan = 1 - Dec = 12)
                </li>
                <li>
                  <b>DD</b> represents a 2-digit day of the month
                  (01-31)
                </li>
                <li>
                  <b>HH</b> represents a 2-digit hour (01-24)
                </li>
                <li>
                  <b>mm</b> represents a 2-digit minute (00-59)
                </li>
                <li>
                  <b>ss</b> represents a 2-digit second (00-59)
                </li>
              </ul>
              The following are example dates expressed as 
              14-digit Timestamps:
              <br></br>
              <div>
                Jan 13, 1999 03:34:35 (am UTC) - 19990113033435
              </div>
              <br></br>
              <div>
                Dec 31, 2004 23:01:00 (pm UTC) - 20041231230100
              </div>
              <br></br>
            </li>
            <li>
              <b>URL</b> represents the actual URL that should be 
              replayed.
            </li>
          </ul>
          <br></br>
          <div>
            Here is an example Archival URL, on an assumed host 
            <b>wayback.somehost.org</b>, with a wayback webapp deployed as
            <b>ROOT</b>, via the Access Point named <b>80:archive</b> for the 
            page <b>http://www.yahoo.com/</b> on Dec 31, 1999 at 12:00:00 UTC.
            <br></br>
            <div>
              <code>
                http://wayback.somehost.org/archive/19991231120000/http://www.yahoo.com/
              </code>
            </div>
            <br></br>
          </div>
          <br></br>
          <div>
            Archival URL mode allows replay of all versions captured
            of a particular URL, by modifying the Timestamp. When an
            Archival URL Replay request is received for a URL, the
            Wayback Machine will replay the closest version in time
            to the Timestamp requested of the particular URL.
          </div>
          <br></br>
          <div>
            HTML documents returned in Archival URL Replay mode are 
            modified from the original version to provide a replay 
            experience more consistent to viewing the original
            content. This is accomplished by one of two methods. The first
            includes modification of a subset of the HTML tags on the server, 
            combined with the insertion of JavaScript into the HTML page. This
            JavaScript executes in the client browser after the page has loaded,
            and modifies the remaining URLs within the HTML page, both 
            Anchors (links) as well as embedded content (images, applets, etc) 
            so that they become appropriate Archival URL requests back to the 
            Wayback application. The second method involves rewriting all HTML
            tags within the page on the server, to make embedded URLs point back
            into the Wayback application.
          </div>
          <br></br>
          <div>
            There is a trade-off between these two approaches. The entirely
            server-side rewriting requires more server resources, and is less 
            tested than the JavaScript method. The JavaScript is also imperfect:
            sometimes requests "leak" to the live web temporarily, before the 
            Javascript has executed. With both methods, not all URLs are
            rewritten correctly, especially URLs that are created by JavaScript
            that was in the original page, and specialized file types containing
            links like Flash and PDF documents.
          </div>
          <br></br>
          <div>
            The <b>name</b> of the Access Point bean in the Spring configuration
            file determines the CONTEXT and PORT used in Archival URLs within
            that Access Point. The Servlet context name where the Wayback 
            application is deployed also factors into the CONTEXT used within
            Archival URLs for each Access Point.
          </div>
          <br></br>
          <div>
            The following examples show the Archival URL prefix for the 
            following two Access Points depending on the Wayback webapp being
            deployed in two different contexts, "ROOT" and "wayback".
          </div>
          <br></br>
          <div>
            If the following Access Point definitions are present in the 
            wayback.xml:
            <pre>

&lt;bean name=&quot;8080:wayback&quot; class=&quot;org.archive.wayback.webapp.AccessPoint&quot;&gt;
  &lt;property name=&quot;collection&quot; ref=&quot;localcollection&quot; /&gt;
  ...
&lt;/bean&gt;

&lt;bean name=&quot;8080:wayback2&quot; class=&quot;org.archive.wayback.webapp.AccessPoint&quot;&gt;
  &lt;property name=&quot;collection&quot; ref=&quot;localcollection&quot; /&gt;
  ...
&lt;/bean&gt;

            </pre>
            then the following table shows the Archival URL prefixes to access
            each collection on the host "wayback.somehost.org" assuming a
            Tomcat Connector listening on port 8080:
          </div>
          <table>
            <tr>
              <th>
                webapp deployed at
              </th>
              <th>
                Access Point bean name
              </th>
              <th>
                Archival URL prefix
              </th>
            </tr>
            <tr>
              <td>
                ROOT
              </td>
              <td>
                8080:wayback
              </td>
              <td>
                http://wayback.somehost.org:8080/wayback/
              </td>
            </tr>
            <tr>
              <td>
                ROOT
              </td>
              <td>
                8080:wayback2
              </td>
              <td>
                http://wayback.somehost.org:8080/wayback2/
              </td>
            </tr>
            <tr>
              <td>
                wb-webapp
              </td>
              <td>
                8080:wayback
              </td>
              <td>
                http://wayback.somehost.org:8080/wb-webapp/wayback/
              </td>
            </tr>
            <tr>
              <td>
                wb-webapp
              </td>
              <td>
                8080:wayback2
              </td>
              <td>
                http://wayback.somehost.org:8080/wb-webapp/wayback2/
              </td>
            </tr>
          </table>
        </p>
        <p>
          The properties <b>parser</b> and <b>uriConverter</b>
          for Archival URL Access Points must be set to the following 
          implementations:
          <pre>

    &lt;property name=&quot;parser&quot;&gt;
      &lt;bean class=&quot;org.archive.wayback.archivalurl.ArchivalUrlRequestParser&quot;
        init-method=&quot;init&quot;&gt;
        &lt;property name=&quot;maxRecords&quot; value=&quot;1000&quot; /&gt;
        &lt;property name=&quot;earliestTimestamp&quot; value=&quot;1996&quot; /&gt;
      &lt;/bean&gt;
    &lt;/property&gt;

    &lt;property name=&quot;uriConverter&quot;&gt;
      &lt;bean class=&quot;org.archive.wayback.archivalurl.ArchivalUrlResultURIConverter&quot;&gt;
        &lt;property name=&quot;replayURIPrefix&quot; value=&quot;http://wayback.somehost.org:8080/wb-webapp/wayback/&quot; /&gt;
      &lt;/bean&gt;
    &lt;/property&gt;

          </pre>
        </p>
        <table>
          <tr>
            <th>
              configuration
            </th>
            <th>
              optional/required
            </th>
            <th>
              description
            </th>
          </tr>
          <tr>
            <td>
              maxRecords
            </td>
            <td>
              optional
            </td>
            <td>
              Sets the default maximum requested records for Archival URL query
              requests.
            </td>
          </tr>
          <tr>
            <td>
              earliestTimestamp
            </td>
            <td>
              optional
            </td>
            <td>
              Set the default start date for requested records for Archival 
              URL query requests.
            </td>
          </tr>
          <tr>
            <td>
              replayURIPrefix
            </td>
            <td>
              required
            </td>
            <td>
              Points to the Archival URL prefix of the Access Point as
              illustrated in the preceding table.
            </td>
          </tr>
        </table>
        <p>
          For additional configuration examples and information about 
          ArchivalUrl Replay mode, please see the file
          <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/ArchivalUrlReplay.xml">ArchivalUrlReplay.xml</a>
        </p>
      </subsection>

      <subsection name="Proxy Replay Mode">
        <p>
          Wayback can be configured to act as an HTTP proxy server. To utilize
          this mode, the wayback webapp must be deployed as the ROOT context,
          and client browser must be configured to proxy all HTTP requests
          through the Wayback Machine application. Instead of retrieving
          documents from the live web, the Wayback Machine will retrieve
          documents from the configured WaybackCollection.
        </p>
        <p>
          Proxy Replay mode does not suffer from the shortcomings of
          the inserted Javascript that the Archival URL mode uses, all URLs
          function as they did originally, but there can be another drawback
          to using this feature: no date information is sent with each request.
          Wayback attempts to address this problem by associating the date 
          clicked on query pages when a Replay session is begun, with the 
          users IP address. This can fail to work properly in situations where
          multiple users are behind a NAT system which causes them to appear to
          have the same IP address.
        </p>
        <p>
          Additionally, there is an experimental Firefox-specific plugin 
          developed by Oskar Grenholm, which provides a novel interface
          to navigate between different captured versions of a page within
          Proxy mode, and also sends a special HTTP header which allows Wayback
          to uniquely associate the correct date with browsers, even those 
          behind a NAT system. You can find out more about 
          this plugin and download it 
          <a href="http://archive-access.sourceforge.net/projects/waxtoolbar/">
            here
          </a>.
        </p>
        <p>
          Thanks Oskar!
        </p>
        <p>
          The following is an example Proxy Replay Access Point definition. It
          assumes to be running on a host <b>wayback.somehost.org</b>, that a
          Tomcat Connector has been added for port <b>8090</b>,
          that the Wayback webapp has been deployed at the ROOT context, and
          that another Archival URL Access Point named "8080:wayback" has been
          configured.
          <pre>

&lt;bean name=&quot;8090&quot; parent=&quot;8080:wayback&quot;&gt;
  &lt;property name=&quot;urlRoot&quot; value=&quot;http://wayback.somehost.org/&quot; /&gt;
  &lt;property name=&quot;replay&quot;&gt; ref=&quot;proxyreplay&quot; /&gt;
  &lt;property name=&quot;uriconverter&quot;&gt;
    &lt;bean class=&quot;org.archive.wayback.proxy.RedirectResultURIConverter&quot;&gt;
      &lt;property name=&quot;redirectURI&quot; value=&quot;http://wayback.somehost.org/jsp/Redirect.jsp&quot; /&gt;
    &lt;/bean&gt;
  &lt;/property&gt;
  &lt;property name=&quot;parser&quot;&gt;
    &lt;bean class=&quot;org.archive.wayback.proxy.ProxyRequestParser&quot; &gt;
      &lt;property name=&quot;localhostNames&quot;&gt;
        &lt;list&gt;
          &lt;value&gt;wayback.somehost.org&lt;/value&gt;
        &lt;/list&gt;
      &lt;/property&gt;
      &lt;property name=&quot;maxRecords&quot; value=&quot;1000&quot; /&gt;
    &lt;/bean&gt;
  &lt;/property&gt;
&lt;/bean&gt;

          </pre>
        </p>
        <p>
          <b>redirectURI</b> is required, and must be set to the name of the
          host where the Wayback application is running. If this is not the 
          primary name of the machine running the Wayback application, then you
          may need to also specify the hostname used for the Wayback application
          in the <b>localhostNames</b> configuration list.
        </p>
        <p>
          For additional configuration examples and information about 
          Proxy Replay mode, please see the file
          <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/ProxyReplay.xml">ProxyReplay.xml</a>
        </p>
      </subsection>

      <subsection name="DomainPrefix Replay Mode">
        <p>
          Wayback includes an additional, experimental Replay mode which is 
          similar to Archival URL mode, in that any document can be refernced
          as a global URL, without any browser configuration requirements. This
          mode requires deploying the Wayback webapp in ROOT context, and a 
          special DNS wildcard aliasing, so that all hostnames with a common
          suffix will be directed to your host running Wayback.
        </p>
        <p>
          The general form of a DomainPrefix URL is: 
          <br></br>
          <div>
            <code>
              http://TIMESTAMP.ARCHIVE-HOSTNAME.WAYBACK-HOSTNAME:PORT/ARCHIVE-PATH
            </code>
          </div>
        </p>
        <p>
          Here is an example DomainPrefix URL, on an assumed host 
          <b>wayback.somehost.org</b>, with a wayback webapp deployed as
          <b>ROOT</b>, via the Access Point named <b>8081</b> (which indicates the
          port Wayback requests will be recieved on) for the 
          page <b>http://www.yahoo.com/foo.gif</b> on Dec 31, 1999 at 12:00:00 UTC.
          <br></br>
          <div>
            <code>
              http://19991231120000.www.yahoo.com.wayback.somehost.org:8081/foo.gif
            </code>
          </div>
        </p>
        <p>
          This mode performs all URL rewriting on the server side, so needs no
          client-side Javascript to execute, and also does not suffer from some
          of the request leakage problems present in Archival URL mode. It 
          presently is somewhat naive about rewriting links within returned
          documents, and will also rewrite URLs in the text of pages
          (not desired), as well as URLs referenced within the page (desired).
        </p>
        <p>
          For additional configuration examples and information about 
          Domain Prefix Replay mode, please see the files
          <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/wayback.xml">wayback.xml</a>
          and
          <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/DomainPrefixReplay.xml">DomainPrefixReplay.xml</a>
          .
        </p>
      </subsection>
    </section>


    <section name="Wayback UI customization options">
      <p>
        Wayback provides several opportunities for customizing the user
        interface presented to users, which can be grouped into 4 categories:
        <ul>
          <li>Query UI rendering .jsp files.</li>
          <li>Replay insert .jsp files.</li>
          <li>Exception rendering .jsp files.</li>
          <li>Localization .properties files.</li>
        </ul>
      </p>
      <subsection name="Query UI">
        <p>
          All content returned by Wayback in response to Query requests is
          generated by .jsp files, which are executed and provided access to
          the results found within the ResourceIndex. Wayback is distributed
          with several sample implementations.
        </p>
        <p>
          To alter the default behavior, you may either provide your own .jsp
          files, and configure the Renderer to use them instead of the
          default .jsp files, or the default .jsp files may be modified
          directly.
          <ul>
            <li>
                <b>captureJsp</b> - used when the request indicates that
                a listing of all dates available for a single URL should be
                returned. Default is
                <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/query/HTMLCaptureResults.jsp">/WEB-INF/query/HTMLCaptureResults.jsp</a>.
                An alternate implementation, /WEB-INF/query/CalendarResults.jsp
                will generate HTML output similar to the global Wayback Machine
                service.
            </li>
            <li>
                <b>urlJsp</b> - used when the request indicates that a summary
                of captures available for a number of URLs should be returned.
                Default is
                <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/query/HTMLUrlResults.jsp">/WEB-INF/query/HTMLUrlResults.jsp</a>
            </li>
            <li>
                <b>xmlCaptureJsp</b> - used when the request indicates that
                a listing of all dates available for a single URL should be
                returned in XML format. Default is
                <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/query/XMLCaptureResults.jsp">/WEB-INF/query/XMLCaptureResults.jsp</a>.
            </li>
            <li>
                <b>xmlUrlJsp</b> - used when the request indicates that a 
                summary of captures available for a number of URLs should be
                returned in XML format.
                Default is
                <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/query/XMLUrlResults.jsp">/WEB-INF/query/XMLUrlResults.jsp</a>
            </li>
          </ul>
        </p>
      </subsection>
      <subsection name="Replay Inserts">
        <p>
          Wayback allows for embedding additional content within replayed HTML
          pages in all Replay modes. This is accomplished by executing one or
          more .jsp files with access to context information about the request,
          the results, and the actual Resource being returned. The output of
          each .jsp file is included within the returned page.
        </p>
        <p>
          Wayback is distributed with several example .jsp insert files that
          can be used as is, modified to suit installation requirements, or
          used as examples for more elaborate customizations:
          <ul>
            <li>
              <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/replay/ArchiveComment.jsp">/WEB-INF/replay/ArchiveComment.jsp</a>
              inserts an HTML comment indicating when the document was
              captured and retrieved.
            </li>
            <li>
              <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/replay/ClientSideJSInsert.jsp">/WEB-INF/replay/ClientSideJSInsert.jsp</a>
              inserts some Javascript into the returned HTML page that updates
              links, images, and other embedded content, attempting to make
              all URL references within the page point back into the Wayback
              service.
              </li>
            <li>
              <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/replay/DebugBanner.jsp">/WEB-INF/replay/DebugBanner.jsp</a>
              Not intended for production use, but a slightly more complex
              jsp insert example that demonstrates how to access various
              request context data, and is sometimes useful for debugging.
            </li>
            <li>
              <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/replay/Disclaimer.jsp">/WEB-INF/replay/Disclaimer.jsp</a>
              Inserts a small banner at the top of replayed HTML pages,
              alerting users that they are viewing an archived page, and
              providing some information about the particular capture.
            </li>
            <li>
              <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/replay/JSLessTimeline.jsp">/WEB-INF/replay/JSLessTimeline.jsp</a>
              Inserts a banner in the top of replayed documents which allows
              users to navigate directly between other captures of the current
              page they are viewing. This version does not use Javascript to
              place the banner, so it will appear in all HTML pages within a
              frameset.
            </li>
            <li>
              <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/replay/Timeline.jsp">/WEB-INF/replay/Timeline.jsp</a>
              Inserts a banner in the top of replayed documents which allows
              users to navigate directly between other captures of the current
              page they are viewing. This version uses Javascript to
              place the banner, attempting to only place the banner in the
              largest frame within a frameset.
            </li>
          </ul>
        </p>
      </subsection>
      <subsection name="Exception Rendering">
        <p>
          Wayback is distributed with a default ExceptionRenderer that allows
          customization of several types of anticipated exceptions that can
          occur through normal operations. The BaseExceptionRenderer allows
          installations to provide alternate .jsp files which are executed, and
          the output of these .jsp files are returned to end users. To alter
          the default behavior, you may either provide your own .jsp files, and
          configure the BaseExceptionRenderer to use them instead of the
          default .jsp files, or the default .jsp files may be modified
          directly.
          <ul>
            <li>
                <b>xmlErrorJsp</b> - used when the request indicates that XML
                data should be returned. Default is
                <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/exception/XMLError.jsp">/WEB-INF/exception/XMLError.jsp</a>
            </li>
            <li>
                <b>errorJsp</b> - used for HTML Replay exceptions, and for all
                Query exceptions. Default is
                <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/exception/HTMLError.jsp">/WEB-INF/exception/HTMLError.jsp</a>
            </li>
            <li>
                <b>imageErrorJsp</b> - used when the request appears to be an
                embedded Replay request that expects an image to be returned.
                Default is
                <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/exception/HTMLError.jsp">/WEB-INF/exception/HTMLError.jsp</a>
                which produced HTML output. This may be desirable over
                returning an actual image, since web browsers will usually show
                any HTML alternate text associated with the image in place of
                the image when image data is not returned. Wayback also
                includes a 1x1 pixel gif, error_image.gif, which can be used to
                display a gray box in place of images requests that result in
                an exception.
            </li>
            <li>
                <b>javascriptErrorJsp</b> - used when the request appears to be an
                embedded Replay request that expects Javascript content to be
                returned. Default is
                <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/exception/JavaScriptError.jsp">/WEB-INF/exception/JavaScriptError.jsp</a>
            </li>
            <li>
                <b>cssErrorJsp</b> - used when the request appears to be an
                embedded Replay request that expects CSS content to be returned.
                Default is
                <a href="https://archive-access.svn.sourceforge.net/svnroot/archive-access/trunk/archive-access/projects/wayback/wayback-webapp/src/main/webapp/WEB-INF/exception/CSSError.jsp">/WEB-INF/exception/CSSError.jsp</a>
            </li>
          </ul>
        </p>
      </subsection>
      <subsection name="Localization .properties files.">
        <p>
          Wayback is packaged with a set of reference implementation .jsp files
          for generating Query, Replay, and Exception user interface pages.
          References to actual user visible text is abstracted within these
          .jsp files so the specific text to display in various pages are read
          from a .properties file. Wayback will automatically search for a
          Locale-specific .properties file from which these text values should
          be loaded, allowing the language presented to users to be changed.
        </p>
        <p>
          By default, Wayback will use the language preference indicated by the
          users web browser to find an appropriate .properties files,
          defaulting to the standard English text if the users preferred
          language is not available. Particular AccessPoints can be forced to a
          particular Locale using the AccessPoint.locale property.
        </p>
        <p>
          Several language customization .property files have already been
          contributed by users in the community and are now included with the
          standard Wayback distribution. We plan for a completely new and
          improved UI implementation for version 1.6, and plan a more active
          outreach program to create customizations in as many languages as
          possible once this new UI is completed, and the required text
          elements are determined.
        </p>
      </subsection>
    </section>


    <section name="Excluding Documents within an AccessPoint">
      <subsection name="Excluding Documents with live Robots.txt">
        Documents may be excluded from access within an Access Point by
        retroactively enforcing the policies in a web sites live robots.txt
        documents by adding the following configuration in the Access Point.
        <pre>

&lt;property name=&quot;exclusionFactory&quot; ref=&quot;excluder-factory-robot&quot; /&gt;

        </pre>

        <br></br>
        Please see the default wayback.xml packaged with this software for an 
        example bean definition for the referenced <b>excluder-factory-robot</b>
        bean.
      </subsection>

      <subsection name="Excluding Documents with an Administrative List">
        Documents may be excluded from access within an Access Point by
        using a plain text file listing URL prefixes which should be blocked.
        If this option is used with a non-zero value for <b>checkInterval</b>,
        the Wayback software will monitor the external file, and will
        automatically reload the file when it changes.
        <br></br>
        The following Spring configuration defines a static exclusion file that
        causes URLs listed in the file <b>/tmp/exclude.txt</b> to be blocked, 
        with the file being checked for updates every 10 minutes.
        <pre>

&lt;bean id=&quot;static-exclusion&quot; class=&quot;org.archive.wayback.accesscontrol.staticmap.StaticMapExclusionFilterFactory&quot; init-method=&quot;init&quot;&gt;
  &lt;property name=&quot;file&quot; value=&quot;/tmp/exclude.txt&quot; /&gt;
  &lt;property name=&quot;checkInterval&quot; value=&quot;600&quot; /&gt;
&lt;/bean&gt;

        </pre>
        <br></br>
        Adding the following configuration to an Access Point will cause the
        excluded URLs named in <b>/tmp/exclude.txt</b> to be inaccessible:
        <pre>

&lt;property name=&quot;exclusionFactory&quot; ref=&quot;static-exclusion&quot;&gt;

        </pre>
      </subsection>

    </section>

    <section name="Restricting who can interact with an AccessPoint">

      <subsection name="Limiting Access based on IP Addresses">
        Access to a particular Access Point can be limited to a specific IP
        address range by adding the following configuration to an Access Point
        definition.

        <pre>

&lt;property name=&quot;authentication&quot;&gt;
  &lt;bean class=&quot;org.archive.wayback.authenticationcontrol.IPMatchesBooleanOperator&quot;&gt;
    &lt;property name=&quot;allowedRanges&quot;&gt;
      &lt;list&gt;
        &lt;value&gt;192.168.1.16/24&lt;/value&gt;
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/bean&gt;
&lt;/property&gt;

        </pre>

        which would have the affect of blocking users outside the 
        <b>192.168.1.16/24</b> network. 
      </subsection>

      <subsection name="Limiting Access based on HTTP BASIC Authentication">
        Access can be restricted to a particular Access Point using Tomcat's
        built-in configuration options. By adding the following configuration to
        the web.xml, which assumes an Access Point named "8080:usersecure" (or 
        really for any port):
        <pre>

&lt;security-role&gt;
  &lt;description&gt;Secured-Wayback&lt;/description&gt;
  &lt;role-name&gt;wayback&lt;/role-name&gt;
&lt;/security-role&gt;

&lt;security-constraint&gt;
  &lt;web-resource-collection&gt;
    &lt;web-resource-name&gt;Secured-Wayback&lt;/web-resource-name&gt;
    &lt;url-pattern&gt;/usersecure/*&lt;/url-pattern&gt;
  &lt;/web-resource-collection&gt;
  &lt;auth-constraint&gt;
    &lt;role-name&gt;wayback&lt;/role-name&gt;
  &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;

&lt;login-config&gt;
  &lt;auth-method&gt;BASIC&lt;/auth-method&gt;
  &lt;realm-name&gt;Secured-Wayback&lt;/realm-name&gt;
&lt;/login-config&gt;

        </pre>
        <br></br>
        <br></br>
        And then adding user configuration to the tomcat-users.xml file:
        <pre>

&lt;role rolename=&quot;wayback&quot;/&gt;
&lt;user password=&quot;changeM3&quot; roles=&quot;wayback&quot; name=&quot;brad&quot;/&gt;

        </pre>
      </subsection>
    </section>

    <section name="Adding Additional Configurations to an AccessPoint">
      <p>
        The following configuration can be added to an Access Point:
        <pre>

&lt;property name=&quot;configs&quot;&gt;
        &lt;props&gt;
                &lt;prop key=&quot;inst&quot;&gt;Acrobatic Association&lt;/prop&gt;
                &lt;prop key=&quot;logo&quot;&gt;http://images.somehost.com/logos/acro.jpg&lt;/prop&gt;
        &lt;/props&gt;
&lt;/property&gt;

        </pre>
      </p>
      <p>
        These configurations are then accessible in the common .jsp rendering
        pages, allowing Collection or Access Point specific text to be relayed
        to shared .jsp files, which can then retrieve the Access Point specific
        configuration with the following code:
        
        <pre>

UIQueryResults results = (UIQueryResults) UIResults.getFromRequest(request);
String instString = results.getContextConfig("inst");
String logoString = results.getContextConfig("logo");

        </pre>
      </p>
    </section>

    <section name="External Tools">

      <p>
        The wayback distribution includes several command-line tools
        that assist in creating and testing index files, and populating
        the ArcProxy location db.
      </p>
      <p>
        All the command line tools can be found which can be found 
        underneath the directory where you unpacked your distribution
        at:<b>bin/*</b> (example: <i>bin/location-client</i>). 
      </p>

      <subsection name="bdb-client">
        <p>
          This tool allows several maintenance operations to be 
          performed on BDB files. There are two primary modes, read 
          and write.
          <ol>
            <li>
              <code>
                bin/bdb-client -r BDB_DIR BDB_NAME [PREFIX]
              </code>
              <div>
                Output records from a BDB database on STDOUT.
              </div>
              <div>
                where:
                <ul>
                  <li>
                    <i>BDB_DIR</i> Open BDB in this
                    directory.
                  </li>
                  <li>
                    <i>BDB_NAME</i> Open BDB with this name.
                  </li>
                  <li>
                    <i>PREFIX</i> (optional) if present, 
                    only output records whose KEY begins 
                    with PREFIX. If this option is omitted,
                    all records will be output from the
                    BDB. Records are always output in sorted
                    order.
                  </li>
                </ul>
              </div>
            </li>
            <li>
              <code>
                bin/bdb-client -w BDB_DIR BDB_NAME
              </code>
              <div>
                Read CDX format lines from STDIN, and insert
                into a BDB, creating the BDB if needed.
              </div>
              <div>
                where:
                <ul>
                  <li>
                    <i>BDB_DIR</i> Open BDB in this
                    directory.
                  </li>
                  <li>
                    <i>BDB_NAME</i> Open BDB with this name.
                  </li>
                </ul>
              </div>
            </li>
          </ol>
        </p>
      </subsection>

      <subsection name="bin-search">
        <p>
          This tool allows binary searching against large sorted text 
          files. It will output lines prefixed with a particular 
          <i>key</i> on STDOUT.
        </p>
        <p>
          <code>
            bin/bin-search KEY FILE [FILE2 ...]
          </code>
          <ul>
            <li>
              <i>KEY</i> String prefix for lines that should be
              output.
            </li>
            <li>
              <i>FILE [FILE2 ...]</i> Search through all files specified, 
              outputting the lines prefixed with KEY from each file in a single,
              sorted stream. This assumes that all FILE arguments are sorted.
            </li>
          </ul>
        </p>
      </subsection>

      <subsection name="arc-indexer|warc-indexer">
        <p>
          These tools create a CDX format index for the ARC/WARC file at
          PATH, either on STDOUT, or at the path specified by CDX_PATH. The
          resulting file can be sorted and merged with other CDX format index
          files to generate CDX format ResourceIndex.
        </p>
          <pre>
            bin/arc-indexer [-identity] PATH [CDX_PATH]
            bin/warc-indexer [-identity] PATH [CDX_PATH]
          </pre>
        <p>
          Note that when manually constructing CDX files using these tools, you
          <b>must</b> set the environment variable <b>LC_ALL=C</b> when using
          the standard UNIX <b>sort</b> command line tool.
        </p>
        <p>
          The <b>-identity</b> option causes the tools to skip canonicalization
          of URLs. See the documentation for the <b>url-client</b> tool, and
          the <a href="resource_index.html#URL_Canonicalization">
            URL Canonicalization
          </a> section for more information.
        </p>
      </subsection>

      <subsection name="location-client">
        <p>
          If you have already populated your ResourceIndex, and just
          need to inform the ArcProxy LocationDB of where ARC files
          are located. This script will allow you to synchronize the
          ArcProxy LocationDB with the directories holding your ARC
          files.
        </p>
        <p>
          Execute the script once for each directory containing
          ARC files (on each machine containing ARC files.) Again, 
          this script will <b>not</b> index the content of the ARC 
          files, but will only populate the ArcProxy LocationDB with 
          the locations of ARC files.
        </p>
        <p>
          <code>
            bin/location-client sync LOCATION_URL ARC_DIR ARC_URL_PREFIX
          </code>
        </p>
        <p>
          where:
          <ul>
            <li>
              <i>
                LOCATION_URL
              </i>
              is the absolute URL where the FileProxy can be 
              accessed. ex.
              <b>
                http://wayback-webapp.your-archive.org:8080/locationdb/locationDB
              </b>
            </li>
            <li>
              <i>
                ARC_DIR
              </i>
              is the absolute path to the directory on the local
              machine which holds ARC files ex.
              <b>
                /2/arc-collection-1
              </b>
            </li>
            <li>
              <i>
                ARC_URL_PREFIX
              </i>
              is the absolute URL where the directory ARC_DIR can
              be accessed. ex.
              <b>
                http://arc-storage-node-1.your-archive.org/2/arc-collection-1/
              </b>
            </li>
          </ul>
        </p>
      </subsection>

      <subsection name="url-client">
        <p>
          URLs stored in BDB and CDX format ResourceIndexes are
          <i>canonicalized</i> to a more generic form. Before 
          performing a lookup operation on the ResourceIndex, the same
          canonicalization function is applied to requested URLs. This
          tool will read space(" ") delimited lines from STDIN, and
          output the same lines on STDOUT, but with one column
          altered. The column that is changed is assumed to be a URL,
          and the version output is the canonicalized form of the
          input URL.
        </p>
        <p>
          This tool is mostly useful for debugging the 
          canonicalization function, but can also be used, if the
          canonicalization function is altered, to update an existing
          CDX index, without recreating CDX files from original ARCs. See the
          section
          <a href="resource_index.html#URL_Canonicalization">
            URL Canonicalization
          </a> for more information.
        </p>
        <p>
          <code>
            bin/url-client [-cdx] [-d DELIMITER] [-f FIELD] [-f FIELD2] ...
          </code>
          <ul>
            <li>
              <i>-cdx</i> Pass thru lines prefixed with " CDX " unchanged.
            </li>
            <li>
              <i>-d DELIMITER</i> Use DELIMITER as to separate fields instead
              of default Space(" ").
            </li>
            <li>
              <i>-f FIELD</i> alter column FIELD of each line,
              instead of the default column 1. If specified multiple times, then
              each column will be canonicalized in transformed lines.
            </li>
          </ul>
        </p>
      </subsection>

    </section>


    <section name="FileProxy and LocationDB application">

      <p>

        The Wayback software includes an additional application, the FileProxy,
        which can simplify some distributed ResourceStore implementations. The
        FileProxy application exposes two external services, one used to 
        configure the underlying database mapping ARC/WRC filenames to the 
        actual, fully qualified HTTP 1.1 URL or local path, and a second
        service which reverse proxies incoming HTTP 1.1 range requests to 
        appropriate back-end storage nodes.
      
      </p>

      <p>
        The <b>fileproxy</b> reverse proxy service allows one or more
        SimpleResourceStore instances to configure a single URL prefix where
        all ARC/WARC files are assumed to be located. This reverse proxy then
        uses a BDB JE to find the actual current location of the ARC/WARC file,
        and forward the request to the actual host holding the ARC/WARC file.
      </p>
      
      <p>
        The <b>locationdb</b> service allows population and management of the
        BDB JE database(the <i>locationDB</i>) used by the <b>fileproxy</b>
        service. There is also a command line tool, <b>location-client</b> 
        described elsewhere in this document which provides command line access
        to the management of the locationDB. 
      </p>
      
      <p>
        Adding the following configuration to wayback.xml will expose the 
        fileproxy and locationdb services:
      </p>
      <pre>

&lt;bean id=&quot;filelocationdb&quot; class=&quot;org.archive.wayback.resourcestore.locationdb.BDBResourceFileLocationDB&quot;
  init-method=&quot;init&quot;&gt;
  &lt;property name=&quot;bdbPath&quot; value=&quot;/tmp/wayback/file-db/db/&quot; /&gt;
  &lt;property name=&quot;bdbName&quot; value=&quot;DB1&quot; /&gt;
  &lt;property name=&quot;logPath&quot; value=&quot;/tmp/wayback/file-db/db.log&quot; /&gt;
&lt;/bean&gt;

&lt;bean name=&quot;8080:fileproxy&quot; class=&quot;org.archive.wayback.resourcestore.locationdb.FileProxyServlet&quot;&gt;
  &lt;property name=&quot;locationDB&quot; ref=&quot;filelocationdb&quot; /&gt;
&lt;/bean&gt;

&lt;bean name=&quot;8080:locationdb&quot; class=&quot;org.archive.wayback.resourcestore.locationdb.ResourceFileLocationDBServlet&quot;&gt;
  &lt;property name=&quot;locationDB&quot; ref=&quot;filelocationdb&quot; /&gt;
&lt;/bean&gt;

      </pre>

    </section>
  </body>
</document>
